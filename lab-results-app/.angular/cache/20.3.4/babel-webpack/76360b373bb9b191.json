{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input, signal, computed, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule, FormBuilder } from '@angular/forms';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\nimport { Subject, takeUntil, combineLatest } from 'rxjs';\nimport { TestResultService } from '../../services/test-result.service';\nlet TestResultEntryComponent = class TestResultEntryComponent {\n  constructor() {\n    this.mode = 'entry';\n    this.fb = inject(FormBuilder);\n    this.testResultService = inject(TestResultService);\n    this.snackBar = inject(MatSnackBar);\n    this.destroy$ = new Subject();\n    // Signals for reactive state\n    this.loading = signal(true, ...(ngDevMode ? [{\n      debugName: \"loading\"\n    }] : []));\n    this.saving = signal(false, ...(ngDevMode ? [{\n      debugName: \"saving\"\n    }] : []));\n    this.sampleInfo = signal(null, ...(ngDevMode ? [{\n      debugName: \"sampleInfo\"\n    }] : []));\n    this.testInfo = signal(null, ...(ngDevMode ? [{\n      debugName: \"testInfo\"\n    }] : []));\n    this.userQualification = signal(null, ...(ngDevMode ? [{\n      debugName: \"userQualification\"\n    }] : []));\n    this.equipment = signal([], ...(ngDevMode ? [{\n      debugName: \"equipment\"\n    }] : []));\n    this.particleTypes = signal([], ...(ngDevMode ? [{\n      debugName: \"particleTypes\"\n    }] : []));\n    // Computed properties\n    this.canEnter = computed(() => {\n      const qual = this.userQualification();\n      return qual?.canEnter && this.mode === 'entry';\n    }, ...(ngDevMode ? [{\n      debugName: \"canEnter\"\n    }] : []));\n    this.canReview = computed(() => {\n      const qual = this.userQualification();\n      return qual?.canReview && this.mode === 'review';\n    }, ...(ngDevMode ? [{\n      debugName: \"canReview\"\n    }] : []));\n    this.canPartialSave = computed(() => {\n      const qual = this.userQualification();\n      const test = this.testInfo();\n      return qual?.canEnter && test && [120, 180, 210, 240].includes(test.id);\n    }, ...(ngDevMode ? [{\n      debugName: \"canPartialSave\"\n    }] : []));\n    this.canMediaReady = computed(() => {\n      const qual = this.userQualification();\n      const test = this.testInfo();\n      return qual?.canEnter && test && [120, 180, 210, 240].includes(test.id);\n    }, ...(ngDevMode ? [{\n      debugName: \"canMediaReady\"\n    }] : []));\n  }\n  ngOnInit() {\n    this.initializeForm();\n    this.loadData();\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n  initializeForm() {\n    this.entryForm = this.fb.group({\n      entries: this.fb.array([]),\n      isPartialSave: [false],\n      isMediaReady: [false],\n      isDelete: [false]\n    });\n  }\n  loadData() {\n    this.loading.set(true);\n    combineLatest([this.testResultService.getSampleInfo(this.sampleId), this.testResultService.getTestInfo(this.testId), this.testResultService.getUserQualification('TEST001', this.testId), this.testResultService.getTestResults(this.sampleId, this.testId)]).pipe(takeUntil(this.destroy$)).subscribe({\n      next: ([sampleInfo, testInfo, qualification, results]) => {\n        this.sampleInfo.set(sampleInfo);\n        this.testInfo.set(testInfo);\n        this.userQualification.set(qualification);\n        this.initializeFormEntries(results);\n        this.loadEquipment();\n        if ([120, 180, 210, 240].includes(testInfo.id)) {\n          this.loadParticleTypes();\n        }\n        this.loading.set(false);\n      },\n      error: error => {\n        console.error('Error loading data:', error);\n        this.snackBar.open('Error loading test data', 'Close', {\n          duration: 3000\n        });\n        this.loading.set(false);\n      }\n    });\n  }\n  initializeFormEntries(results) {\n    const entriesArray = this.entryForm.get('entries');\n    entriesArray.clear();\n    if (results.length === 0) {\n      // Add default entry\n      entriesArray.push(this.createEntryFormGroup());\n    } else {\n      results.forEach(result => {\n        entriesArray.push(this.createEntryFormGroup(result));\n      });\n    }\n  }\n  createEntryFormGroup(data) {\n    return this.fb.group({\n      sampleId: [this.sampleId],\n      testId: [this.testId],\n      trialNumber: [data?.trialNumber || 1],\n      value1: [data?.value1],\n      value2: [data?.value2],\n      value3: [data?.value3],\n      trialCalc: [data?.trialCalc],\n      id1: [data?.id1],\n      id2: [data?.id2],\n      id3: [data?.id3],\n      status: [data?.status],\n      mainComments: [data?.mainComments],\n      isSelected: [true]\n    });\n  }\n  loadEquipment() {\n    const test = this.testInfo();\n    if (!test) return;\n    // Load equipment based on test type\n    const equipmentTypes = this.getEquipmentTypesForTest(test.id);\n    equipmentTypes.forEach(type => {\n      this.testResultService.getEquipment(type, test.id).pipe(takeUntil(this.destroy$)).subscribe(equipment => {\n        this.equipment.update(current => [...current, ...equipment]);\n      });\n    });\n  }\n  loadParticleTypes() {\n    this.testResultService.getParticleTypes(this.sampleId, this.testId).pipe(takeUntil(this.destroy$)).subscribe(particleTypes => {\n      this.particleTypes.set(particleTypes);\n    });\n  }\n  getEquipmentTypesForTest(testId) {\n    switch (testId) {\n      case 10:\n        return ['THERMOMETER'];\n      case 50:\n      case 60:\n        return ['THERMOMETER', 'TIMER', 'VISCOMETER'];\n      case 80:\n        return ['BAROMETER', 'THERMOMETER'];\n      case 130:\n        return [];\n      case 140:\n        return ['THERMOMETER'];\n      case 170:\n      case 230:\n        return ['THERMOMETER'];\n      case 220:\n        return ['THERMOMETER'];\n      case 250:\n        return ['DELETERIOUS'];\n      default:\n        return [];\n    }\n  }\n  onSubmit() {\n    if (this.entryForm.valid) {\n      this.saveResults('entry');\n    }\n  }\n  onPartialSave() {\n    this.entryForm.patchValue({\n      isPartialSave: true\n    });\n    this.saveResults('entry');\n  }\n  onMediaReady() {\n    this.entryForm.patchValue({\n      isMediaReady: true\n    });\n    this.saveResults('entry');\n  }\n  onAccept() {\n    this.saveResults('reviewaccept');\n  }\n  onReject() {\n    this.saveResults('reviewreject');\n  }\n  onClear() {\n    this.entryForm.reset();\n    this.initializeFormEntries([]);\n  }\n  onCancel() {\n    // Navigate back or close\n    window.history.back();\n  }\n  saveResults(mode) {\n    this.saving.set(true);\n    const formValue = this.entryForm.value;\n    const saveData = {\n      sampleId: this.sampleId,\n      testId: this.testId,\n      mode: mode,\n      entries: formValue.entries.filter(entry => entry.isSelected),\n      isPartialSave: formValue.isPartialSave,\n      isMediaReady: formValue.isMediaReady,\n      isDelete: formValue.isDelete\n    };\n    this.testResultService.saveTestResults(saveData).pipe(takeUntil(this.destroy$)).subscribe({\n      next: response => {\n        this.saving.set(false);\n        if (response.success) {\n          this.snackBar.open('Results saved successfully', 'Close', {\n            duration: 3000\n          });\n          this.loadData(); // Reload to get updated data\n        } else {\n          this.snackBar.open(response.errorMessage || 'Error saving results', 'Close', {\n            duration: 5000\n          });\n        }\n      },\n      error: error => {\n        this.saving.set(false);\n        console.error('Error saving results:', error);\n        this.snackBar.open('Error saving results', 'Close', {\n          duration: 3000\n        });\n      }\n    });\n  }\n};\n__decorate([Input()], TestResultEntryComponent.prototype, \"sampleId\", void 0);\n__decorate([Input()], TestResultEntryComponent.prototype, \"testId\", void 0);\n__decorate([Input()], TestResultEntryComponent.prototype, \"mode\", void 0);\nTestResultEntryComponent = __decorate([Component({\n  selector: 'app-test-result-entry',\n  standalone: true,\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, MatCardModule, MatButtonModule, MatFormFieldModule, MatInputModule, MatSelectModule, MatCheckboxModule, MatRadioModule, MatIconModule, MatProgressSpinnerModule, MatSnackBarModule],\n  template: `\n    <div class=\"test-result-entry\">\n      @if (loading()) {\n        <mat-spinner></mat-spinner>\n      } @else {\n        <!-- Sample Information Header -->\n        <mat-card class=\"sample-info-card\">\n          <mat-card-header>\n            <mat-card-title>{{ testInfo()?.name || 'Test Entry' }}</mat-card-title>\n            <mat-card-subtitle>\n              Sample #{{ sampleInfo()?.id }} | {{ sampleInfo()?.tagNumber }} | \n              {{ sampleInfo()?.componentName }} ({{ sampleInfo()?.component }}) | \n              {{ sampleInfo()?.locationName }} ({{ sampleInfo()?.location }})\n            </mat-card-subtitle>\n          </mat-card-header>\n          <mat-card-content>\n            <div class=\"sample-details\">\n              <div><strong>Lube Type:</strong> {{ sampleInfo()?.lubeType }}</div>\n              <div><strong>Quality Class:</strong> {{ sampleInfo()?.qualityClass }}</div>\n              @if (sampleInfo()?.cnrText) {\n                <div class=\"cnr-info\" [style.background-color]=\"sampleInfo()?.cnrColor\" \n                     [style.color]=\"sampleInfo()?.fColor\">\n                  {{ sampleInfo()?.cnrText }}\n                </div>\n              }\n            </div>\n          </mat-card-content>\n        </mat-card>\n\n        <!-- Test Entry Form -->\n        <mat-card class=\"entry-form-card\">\n          <mat-card-content>\n            <form [formGroup]=\"entryForm\" (ngSubmit)=\"onSubmit()\">\n              <!-- Dynamic form fields based on test type -->\n              @if (testInfo()?.id) {\n                <ng-container [ngSwitch]=\"testInfo()!.id\">\n                  <!-- TAN Test (10) -->\n                  @case (10) {\n                    <app-tan-entry [formGroup]=\"entryForm\" [equipment]=\"equipment()\"></app-tan-entry>\n                  }\n                  \n                  <!-- Viscosity Tests (50, 60) -->\n                  @case (50; 60) {\n                    <app-viscosity-entry [formGroup]=\"entryForm\" [equipment]=\"equipment()\" \n                                        [lubeType]=\"sampleInfo()?.lubeType || ''\"></app-viscosity-entry>\n                  }\n                  \n                  <!-- FTIR Test (70) -->\n                  @case (70) {\n                    <app-ftir-entry [formGroup]=\"entryForm\"></app-ftir-entry>\n                  }\n                  \n                  <!-- Particle Analysis Tests (120, 180, 210, 240) -->\n                  @case (120; 180; 210; 240) {\n                    <app-particle-analysis-entry [formGroup]=\"entryForm\" \n                                                [particleTypes]=\"particleTypes()\"\n                                                [testId]=\"testInfo()!.id\"></app-particle-analysis-entry>\n                  }\n                  \n                  <!-- Default generic entry -->\n                  @default {\n                    <app-generic-entry [formGroup]=\"entryForm\" [equipment]=\"equipment()\"></app-generic-entry>\n                  }\n                </ng-container>\n              }\n\n              <!-- Action Buttons -->\n              <div class=\"action-buttons\">\n                @if (canEnter()) {\n                  <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!entryForm.valid || saving()\">\n                    @if (saving()) {\n                      <mat-spinner diameter=\"20\"></mat-spinner>\n                    } @else {\n                      Save\n                    }\n                  </button>\n                  \n                  @if (canPartialSave()) {\n                    <button mat-button type=\"button\" (click)=\"onPartialSave()\" [disabled]=\"saving()\">\n                      Partial Save\n                    </button>\n                  }\n                  \n                  @if (canMediaReady()) {\n                    <button mat-button type=\"button\" (click)=\"onMediaReady()\" [disabled]=\"saving()\">\n                      Media Ready\n                    </button>\n                  }\n                  \n                  <button mat-button type=\"button\" (click)=\"onClear()\">\n                    Clear\n                  </button>\n                }\n                \n                @if (canReview()) {\n                  <button mat-raised-button color=\"accent\" type=\"button\" (click)=\"onAccept()\" [disabled]=\"saving()\">\n                    Accept\n                  </button>\n                  <button mat-button color=\"warn\" type=\"button\" (click)=\"onReject()\" [disabled]=\"saving()\">\n                    Reject\n                  </button>\n                }\n                \n                <button mat-button type=\"button\" (click)=\"onCancel()\">\n                  Cancel\n                </button>\n              </div>\n            </form>\n          </mat-card-content>\n        </mat-card>\n      }\n    </div>\n  `,\n  styles: [`\n    .test-result-entry {\n      max-width: 1200px;\n      margin: 0 auto;\n      padding: 20px;\n    }\n    \n    .sample-info-card, .entry-form-card {\n      margin-bottom: 20px;\n    }\n    \n    .sample-details {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 10px;\n    }\n    \n    .cnr-info {\n      padding: 8px;\n      border-radius: 4px;\n      font-weight: bold;\n    }\n    \n    .action-buttons {\n      display: flex;\n      gap: 10px;\n      margin-top: 20px;\n      flex-wrap: wrap;\n    }\n    \n    .action-buttons button {\n      min-width: 120px;\n    }\n  `]\n})], TestResultEntryComponent);\nexport { TestResultEntryComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}