{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let EquipmentService = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class EquipmentService {\n    constructor() {\n      this.http = inject(HttpClient);\n      this.apiUrl = 'http://localhost:5005/api/mock';\n    }\n    /**\n     * Get all equipment\n     */\n    getAllEquipment() {\n      return this.http.get(`${this.apiUrl}/equipment`);\n    }\n    /**\n     * Get equipment by type\n     */\n    getEquipmentByType(equipType) {\n      return this.http.get(`${this.apiUrl}/equipment/type/${equipType}`);\n    }\n    /**\n     * Get equipment for a specific test\n     */\n    getEquipmentForTest(testId) {\n      return this.http.get(`${this.apiUrl}/equipment/test/${testId}`);\n    }\n    /**\n     * Get equipment by type and test ID\n     */\n    getEquipmentByTypeAndTest(equipType, testId) {\n      return this.http.get(`${this.apiUrl}/equipment/type/${equipType}/test/${testId}`);\n    }\n    /**\n     * Get equipment by ID\n     */\n    getEquipmentById(id) {\n      return this.http.get(`${this.apiUrl}/equipment/id/${id}`);\n    }\n    /**\n     * Get equipment by name\n     */\n    getEquipmentByName(equipName) {\n      return this.http.get(`${this.apiUrl}/equipment/name/${equipName}`);\n    }\n    /**\n     * Get all equipment types\n     */\n    getEquipmentTypes() {\n      return this.http.get(`${this.apiUrl}/equipment/types`);\n    }\n    /**\n     * Get equipment types for a specific test\n     */\n    getEquipmentTypesForTest(testId) {\n      return this.http.get(`${this.apiUrl}/equipment/types/test/${testId}`);\n    }\n    /**\n     * Get overdue equipment\n     */\n    getOverdueEquipment() {\n      return this.http.get(`${this.apiUrl}/equipment/overdue`);\n    }\n    /**\n     * Get equipment expiring within specified days\n     */\n    getEquipmentExpiringWithinDays(days) {\n      return this.http.get(`${this.apiUrl}/equipment/expiring/${days}`);\n    }\n    /**\n     * Add new equipment\n     */\n    addEquipment(equipment) {\n      return this.http.post(`${this.apiUrl}/equipment`, equipment);\n    }\n    /**\n     * Update equipment\n     */\n    updateEquipment(id, updates) {\n      return this.http.put(`${this.apiUrl}/equipment/${id}`, updates);\n    }\n    /**\n     * Delete equipment (mark as excluded)\n     */\n    deleteEquipment(id) {\n      return this.http.delete(`${this.apiUrl}/equipment/${id}`).pipe(map(() => true));\n    }\n    /**\n     * Get viscometer calibration data\n     */\n    getViscometerCalibration(equipName) {\n      return this.http.get(`${this.apiUrl}/equipment/viscometer/${equipName}/calibration`);\n    }\n    /**\n     * Check if equipment is suitable for test\n     */\n    isEquipmentSuitableForTest(equipName, testId) {\n      return this.http.get(`${this.apiUrl}/equipment/${equipName}/suitable/${testId}`).pipe(map(response => response.isSuitable));\n    }\n    /**\n     * Get equipment status\n     */\n    getEquipmentStatus(equipName) {\n      return this.http.get(`${this.apiUrl}/equipment/${equipName}/status`).pipe(map(response => response.status));\n    }\n    /**\n     * Get equipment suffix for display\n     */\n    getEquipmentSuffix(equipName) {\n      return this.http.get(`${this.apiUrl}/equipment/${equipName}/suffix`).pipe(map(response => response.suffix));\n    }\n    /**\n     * Get equipment with due date information\n     */\n    getEquipmentWithDueDateInfo(equipName) {\n      return this.http.get(`${this.apiUrl}/equipment/${equipName}/due-date-info`);\n    }\n    /**\n     * Get equipment usage statistics\n     */\n    getEquipmentUsageStats() {\n      return this.http.get(`${this.apiUrl}/equipment/usage-stats`);\n    }\n    /**\n     * Get equipment maintenance schedule\n     */\n    getMaintenanceSchedule() {\n      return this.http.get(`${this.apiUrl}/equipment/maintenance-schedule`);\n    }\n    /**\n     * Validate equipment selection for a test\n     */\n    validateEquipmentForTest(equipName, testId, equipType) {\n      return this.http.get(`${this.apiUrl}/equipment/${equipName}/validate/${testId}/${equipType}`);\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function EquipmentService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || EquipmentService)();\n    }, this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EquipmentService,\n      factory: EquipmentService.ɵfac,\n      providedIn: 'root'\n    }));\n  }\n  _staticBlock();\n  return EquipmentService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}