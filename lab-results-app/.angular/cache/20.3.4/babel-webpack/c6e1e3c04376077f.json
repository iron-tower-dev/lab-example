{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let UserQualificationService = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class UserQualificationService {\n    constructor() {\n      this.http = inject(HttpClient);\n      this.apiUrl = 'https://localhost:7001/api/mock';\n    }\n    /**\n     * Get user qualifications for a specific user\n     */\n    getUserQualifications(userId) {\n      return this.http.get(`${this.apiUrl}/qualifications/user/${userId}`);\n    }\n    /**\n     * Check if user is qualified for a specific test\n     */\n    isUserQualified(userId, testId) {\n      return this.http.get(`${this.apiUrl}/qualifications/user/${userId}/test/${testId}`).pipe(map(response => response.qualification));\n    }\n    /**\n     * Check if user is qualified to review results for a specific test\n     */\n    isUserQualifiedToReview(userId, testId) {\n      return this.http.get(`${this.apiUrl}/qualifications/user/${userId}/test/${testId}/review`).pipe(map(response => response.qualification));\n    }\n    /**\n     * Check if user can perform a specific action\n     */\n    canUserPerformAction(userId, testId, action) {\n      return this.http.get(`${this.apiUrl}/qualifications/user/${userId}/test/${testId}/action/${action}`).pipe(map(response => response.canPerform));\n    }\n    /**\n     * Get all test stands\n     */\n    getTestStands() {\n      return this.http.get(`${this.apiUrl}/qualifications/test-stands`);\n    }\n    /**\n     * Get all qualification levels\n     */\n    getQualificationLevels() {\n      return this.http.get(`${this.apiUrl}/qualifications/levels`);\n    }\n    /**\n     * Add or update user qualification\n     */\n    saveUserQualification(qualification) {\n      return this.http.post(`${this.apiUrl}/qualifications`, qualification);\n    }\n    /**\n     * Remove user qualification\n     */\n    removeUserQualification(employeeId, testStandId) {\n      return this.http.delete(`${this.apiUrl}/qualifications/user/${employeeId}/test-stand/${testStandId}`).pipe(map(() => true));\n    }\n    /**\n     * Get users by qualification level for a specific test\n     */\n    getUsersByQualification(testId, qualificationLevel) {\n      return this.http.get(`${this.apiUrl}/qualifications/test/${testId}/level/${qualificationLevel}`);\n    }\n    /**\n     * Check if user can enter results for a test\n     */\n    canEnterResults(userId, testId) {\n      return this.http.get(`${this.apiUrl}/qualifications/user/${userId}/test/${testId}/can-enter`).pipe(map(response => response.canEnter));\n    }\n    /**\n     * Check if user can review results for a test\n     */\n    canReviewResults(userId, testId) {\n      return this.http.get(`${this.apiUrl}/qualifications/user/${userId}/test/${testId}/can-review`).pipe(map(response => response.canReview));\n    }\n    /**\n     * Check if user can accept results for a test\n     */\n    canAcceptResults(userId, testId) {\n      return this.http.get(`${this.apiUrl}/qualifications/user/${userId}/test/${testId}/can-accept`).pipe(map(response => response.canAccept));\n    }\n    /**\n     * Check if user can reject results for a test\n     */\n    canRejectResults(userId, testId) {\n      return this.http.get(`${this.apiUrl}/qualifications/user/${userId}/test/${testId}/can-reject`).pipe(map(response => response.canReject));\n    }\n    /**\n     * Check if user can delete results for a test\n     */\n    canDeleteResults(userId, testId) {\n      return this.http.get(`${this.apiUrl}/qualifications/user/${userId}/test/${testId}/can-delete`).pipe(map(response => response.canDelete));\n    }\n    /**\n     * Check if user can perform partial saves for a test\n     */\n    canPartialSave(userId, testId) {\n      return this.http.get(`${this.apiUrl}/qualifications/user/${userId}/test/${testId}/can-partial-save`).pipe(map(response => response.canPartialSave));\n    }\n    /**\n     * Check if user has microscopy permissions\n     */\n    hasMicroscopyPermissions(userId) {\n      return this.http.get(`${this.apiUrl}/qualifications/user/${userId}/microscopy-permissions`).pipe(map(response => response.hasPermissions));\n    }\n    /**\n     * Get qualification level description\n     */\n    getQualificationDescription(level) {\n      // This would typically come from the API, but for now we'll keep it local\n      const qualificationLevels = {\n        'Q/QAG': 'Qualified/Quality Assurance Qualified',\n        'MicrE': 'Microscopy Expert',\n        'TRAIN': 'Training'\n      };\n      return qualificationLevels[level] || level;\n    }\n    /**\n     * Get permissions for a qualification level\n     */\n    getPermissionsForLevel(level) {\n      // This would typically come from the API, but for now we'll keep it local\n      const permissions = {\n        'Q/QAG': ['enter', 'review', 'accept', 'reject', 'delete'],\n        'MicrE': ['enter', 'review', 'accept', 'reject', 'delete', 'microscopy'],\n        'TRAIN': ['enter', 'partial_save']\n      };\n      return permissions[level] || [];\n    }\n    /**\n     * Check if a qualification level has a specific permission\n     */\n    hasPermission(level, permission) {\n      const permissions = this.getPermissionsForLevel(level);\n      return permissions.includes(permission);\n    }\n    /**\n     * Get the highest qualification level for a user across all test stands\n     */\n    getHighestQualificationLevel(userId) {\n      return this.http.get(`${this.apiUrl}/qualifications/user/${userId}/highest-level`).pipe(map(response => response.level));\n    }\n    /**\n     * Check if user is a supervisor (has Q/QAG or MicrE qualifications)\n     */\n    isSupervisor(userId) {\n      return this.http.get(`${this.apiUrl}/qualifications/user/${userId}/is-supervisor`).pipe(map(response => response.isSupervisor));\n    }\n    /**\n     * Get all users with supervisor privileges\n     */\n    getSupervisors() {\n      return this.http.get(`${this.apiUrl}/qualifications/supervisors`);\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function UserQualificationService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || UserQualificationService)();\n    }, this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserQualificationService,\n      factory: UserQualificationService.ɵfac,\n      providedIn: 'root'\n    }));\n  }\n  _staticBlock();\n  return UserQualificationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}