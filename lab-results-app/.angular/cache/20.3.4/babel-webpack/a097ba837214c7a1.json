{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let StatusManagementService = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class StatusManagementService {\n    constructor() {\n      this.http = inject(HttpClient);\n      this.apiUrl = 'http://localhost:5005/api/mock';\n    }\n    /**\n     * Get all test statuses\n     */\n    getAllStatuses() {\n      return this.http.get(`${this.apiUrl}/statuses`);\n    }\n    /**\n     * Get status by code\n     */\n    getStatusByCode(code) {\n      return this.http.get(`${this.apiUrl}/statuses/${code}`);\n    }\n    /**\n     * Get workflow for a specific test\n     */\n    getTestWorkflow(testId) {\n      return this.http.get(`${this.apiUrl}/statuses/test/${testId}/workflow`);\n    }\n    /**\n     * Check if status transition is allowed\n     */\n    isStatusTransitionAllowed(fromStatus, toStatus, testId) {\n      return this.http.get(`${this.apiUrl}/statuses/transition/${fromStatus}/${toStatus}/test/${testId}`);\n    }\n    /**\n     * Get next possible statuses for a given status and test\n     */\n    getNextPossibleStatuses(currentStatus, testId) {\n      return this.http.get(`${this.apiUrl}/statuses/${currentStatus}/next/test/${testId}`);\n    }\n    /**\n     * Check if test requires review at current status\n     */\n    requiresReview(status) {\n      return this.http.get(`${this.apiUrl}/statuses/${status}/requires-review`).pipe(map(response => response.requiresReview));\n    }\n    /**\n     * Check if status is final\n     */\n    isFinalStatus(status) {\n      return this.http.get(`${this.apiUrl}/statuses/${status}/is-final`).pipe(map(response => response.isFinal));\n    }\n    /**\n     * Get status color for display\n     */\n    getStatusColor(status) {\n      return this.http.get(`${this.apiUrl}/statuses/${status}/color`).pipe(map(response => response.color));\n    }\n    /**\n     * Get status description\n     */\n    getStatusDescription(status) {\n      return this.http.get(`${this.apiUrl}/statuses/${status}/description`).pipe(map(response => response.description));\n    }\n    /**\n     * Check if partial save is allowed for a test\n     */\n    isPartialSaveAllowed(testId) {\n      return this.http.get(`${this.apiUrl}/statuses/test/${testId}/partial-save-allowed`).pipe(map(response => response.allowed));\n    }\n    /**\n     * Check if delete is allowed for a test\n     */\n    isDeleteAllowed(testId) {\n      return this.http.get(`${this.apiUrl}/statuses/test/${testId}/delete-allowed`).pipe(map(response => response.allowed));\n    }\n    /**\n     * Check if review is required for a test\n     */\n    isReviewRequired(testId) {\n      return this.http.get(`${this.apiUrl}/statuses/test/${testId}/review-required`).pipe(map(response => response.required));\n    }\n    /**\n     * Get appropriate status for partial save\n     */\n    getPartialSaveStatus(testId, userQualification) {\n      return this.http.get(`${this.apiUrl}/statuses/test/${testId}/partial-save-status/${userQualification}`).pipe(map(response => response.status));\n    }\n    /**\n     * Get appropriate status for full save\n     */\n    getFullSaveStatus(testId, userQualification) {\n      return this.http.get(`${this.apiUrl}/statuses/test/${testId}/full-save-status/${userQualification}`).pipe(map(response => response.status));\n    }\n    /**\n     * Get appropriate status for media ready\n     */\n    getMediaReadyStatus(testId) {\n      return this.http.get(`${this.apiUrl}/statuses/test/${testId}/media-ready-status`).pipe(map(response => response.status));\n    }\n    /**\n     * Get appropriate status for training\n     */\n    getTrainingStatus() {\n      return this.http.get(`${this.apiUrl}/statuses/training-status`).pipe(map(response => response.status));\n    }\n    /**\n     * Get appropriate status for validation\n     */\n    getValidationStatus() {\n      return this.http.get(`${this.apiUrl}/statuses/validation-status`).pipe(map(response => response.status));\n    }\n    /**\n     * Get appropriate status for cancellation\n     */\n    getCancellationStatus() {\n      return this.http.get(`${this.apiUrl}/statuses/cancellation-status`).pipe(map(response => response.status));\n    }\n    /**\n     * Check if user can perform action based on status and qualification\n     */\n    canPerformAction(action, currentStatus, testId, userQualification) {\n      return this.http.get(`${this.apiUrl}/statuses/action/${action}/current/${currentStatus}/test/${testId}/qualification/${userQualification}`).pipe(map(response => response.canPerform));\n    }\n    /**\n     * Get status workflow for display\n     */\n    getStatusWorkflowForDisplay(testId) {\n      return this.http.get(`${this.apiUrl}/statuses/test/${testId}/workflow-display`);\n    }\n    /**\n     * Get status statistics for a test\n     */\n    getStatusStatistics(testId) {\n      return this.http.get(`${this.apiUrl}/statuses/test/${testId}/statistics`);\n    }\n    /**\n     * Get overdue tests (tests that have been in a non-final status too long)\n     */\n    getOverdueTests() {\n      return this.http.get(`${this.apiUrl}/statuses/overdue-tests`);\n    }\n    /**\n     * Get tests pending review\n     */\n    getTestsPendingReview() {\n      return this.http.get(`${this.apiUrl}/statuses/pending-review`);\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function StatusManagementService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || StatusManagementService)();\n    }, this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: StatusManagementService,\n      factory: StatusManagementService.ɵfac,\n      providedIn: 'root'\n    }));\n  }\n  _staticBlock();\n  return StatusManagementService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}